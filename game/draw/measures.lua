local MEASURES = {  }
local Vector = require("utils.classes.vector")
local Array = require("utils.classes.array")
MEASURES.Y_OFFSET_MOD = 0.65
MEASURES.FRAME_ANIMATION = 1.25
MEASURES.COVER_FADE_DURATION = 0.375
MEASURES.TILE_SIZE = 24
MEASURES.ITEM_SIZE = 16
MEASURES.PROJECTILE_SIZE = 23
MEASURES.TEXT_ICON_SIZE = 11
MEASURES.TEXT_ICON_SPACE = 0
MEASURES.ABILITY_SIZE = 24
MEASURES.MARGIN_SCREEN = 8
MEASURES.MARGIN_STATS = 16
MEASURES.MARGIN_INTERNAL = 6
MEASURES.MARGIN_BUTTON = 6
MEASURES.MARGIN_TITLE = 30
MEASURES.TITLE_CHOICE_GAP = 11
MEASURES.HEIGHT_BUTTON = 8 + (MEASURES.MARGIN_INTERNAL - 1) * 2
MEASURES.BORDER_WINDOW = 2
MEASURES.WINDOW_ITEM_MARGIN = 3
MEASURES.WIDTH_ITEM_WINDOW = 245
MEASURES.WIDTH_RESOURCE_BAR = 100
MEASURES.WIDTH_RESOURCE_BAR_BOSS = 250
if PortSettings.IS_MOBILE then
    MEASURES.MARGIN_SCREEN = 16
    MEASURES.HEIGHT_BUTTON = MEASURES.HEIGHT_BUTTON + 9
    MEASURES.WIDTH_ITEM_WINDOW = 281
    MEASURES.WIDTH_RESOURCE_BAR_BOSS = 230
end

MEASURES.MARGIN_ITEM_WINDOW = MEASURES.TILE_SIZE * 1.8
MEASURES.MINIMAP_SIZE = 2
MEASURES.SHADOWED_OFFSET = Vector:new(0, -4) / MEASURES.TILE_SIZE
MEASURES.FLYING_OFFSET = Vector:new(0, -3) / MEASURES.TILE_SIZE
MEASURES.PROJECTILE_OFFSET = Vector:new(0, -1)
MEASURES.TITLE_BUTTON_WIDTH = 130
MEASURES.WIDTH_TITLE_CATEGORIES = 130
MEASURES.MARGIN_OPTIONS = 20
MEASURES.WIDTH_OPTIONS = 281
MEASURES.WIDTH_HIGHSCORE = 331
MEASURES.WIDTH_INTRO = 281
if PortSettings.IS_MOBILE then
    MEASURES.WIDTH_OPTIONS = MEASURES.WIDTH_OPTIONS + 40
    MEASURES.WIDTH_HIGHSCORE = MEASURES.WIDTH_HIGHSCORE + 60
    MEASURES.WIDTH_INTRO = MEASURES.WIDTH_INTRO + 120
end

local MEDIUM_HEIGHT = require("draw.fonts").MEDIUM.height
MEASURES.HEIGHT_CONTROLS = (MEDIUM_HEIGHT + MEASURES.BORDER_WINDOW + MEASURES.MARGIN_INTERNAL * 2 - 1 + (MEDIUM_HEIGHT + 16) * 7)
MEASURES.WIDTH_OPTIONS_CHOICE = 120
MEASURES.WIDTH_PAUSE_WINDOW = 150
MEASURES.FLIPPED_DIRECTIONS = Array:new(LEFT, DOWN)
MEASURES.toHorizontalDirection = function(direction)
    if MEASURES.FLIPPED_DIRECTIONS:contains(direction) then
        return MEASURES.FLIPPED_DIRECTIONS[1]
    else
        return reverseDirection(MEASURES.FLIPPED_DIRECTIONS[1])
    end

end
MEASURES.ALIGNMENT = { [UP_LEFT] = Vector:new(0, 0), [UP] = Vector:new(1 / 2, 0), [UP_RIGHT] = Vector:new(1, 0), [LEFT] = Vector:new(0, 1 / 2), [CENTER] = Vector:new(1 / 2, 1 / 2), [RIGHT] = Vector:new(1, 1 / 2), [DOWN_LEFT] = Vector:new(0, 1), [DOWN] = Vector:new(1 / 2, 1), [DOWN_RIGHT] = Vector:new(1, 1) }
return MEASURES

